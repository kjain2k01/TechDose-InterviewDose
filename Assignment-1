Average case time complexity of quicksort?

A.O(n)
B.O(nlogn)
C.O(n^2 )
D.O(n^3)

ans = O(nlogn)

Worst case time complexity of quicksort?

A.O(n)
B.O(nlogn)
C.O(n^2)
D.O(n^3)

ans = O(n^2)

Time complexity of binary search?

A.O(1)
B.O(logn)
C.O((logn)^2)
O(n)

ans = O(logn)

f f():
	ans = 0
	for i = 1 to n:
		for j = 1 to log(i):
			ans += 1
	print(ans)
Time Complexity of this program:

A.O(n)
B.O(nlogn)
C.O(n^2)
D.O(n^3)

ans = O(nlogn)

def f():
	a = 0
	for i = 1 to n:
		a += i;
	b = 0
	for i = 1 to m:
		b += i;
Time Complexity of this program:

A.O(n)
B.O(m)
C.O(n+m)
D.O(n∗m)

ans = O(n+m)

def f():
	a = 0
	for i = 1 to n:
		a += random.randint();			
		b = 0
		for j = 1 to m:
			b += random.randint();
Time Complexity of this program:

A.O(n)
B.O(m)
C.O(n+m)
D.O(n∗m)

o(n*m)

def f():
	int a[n][n]
	// Finding sum of elements of a matrix that are above or on the diagonal.
	sum = 0
	for i = 1 to n:
		for j = i to n:
			sum += a[i][j]
	print(sum)
Time Complexity of this program:

A.O(n)
B.O(nlogn)
C.O(n^2)
D.O(n^3)

ans = O(n^2)

def f():
	int a[n][n]
	sum = 0
	// Finding sum of elements of a matrix that are strictly above the diagonal.
	for i = 1 to n:
		for j = i to n:
			sum += a[i][j]
	print(sum)
	
	for i = 1 to n:
		sum -= a[i][i]
Time Complexity of this program:

A.O(n)
B.O(nlogn)
C.O(n^2)
D.O(n^3)

ans = O(n^2)

def f():
	ans = 0
	for i = 1 to n:
		for j = n to i:
			ans += (i * j)
	print(ans)
Time Complexity of this program:


A.O(n)
B.O(nlogn)
C.O(n^2)
D.O(n^3)

ans = O(n^2)


def f():
	int a[N + 1][M + 1][K + 1]
	sum = 0
	for i = 1 to N:
		for j = i to M:
			for k = j to K:
				sum += a[i][j]
	print(sum)
Time Complexity of this program:

A.O(N+M+K)
B.O(N∗M∗K)
C.O(N∗M+K)
D.O(N+M∗K)

ans = O(N*M*K)

def f(n):
	ans = 0
	while (n > 0):
		ans += n
		n /= 2;
	print(ans)
Time Complexity of this program:

A.O(logn)
B.O(n)
B.O(nlogn)
C.O(n^2)

ans = O(logn)

def f(n):
	ans = 0
	while (n > 0):
		ans += n % 10
		n /= 10;
	print(ans)
Time Complexity of this program:

A.O(log_2 n)
B.O(log_3 n)
C.O(log_10 n)
D.O(n)

ans  = O(log_10 n)

def f():
	ans = 0
	for (i = n; i >= 1; i /= 2):
		for j = m to i:
			ans += (i * j)
	print(ans)
Time Complexity of this program:

A.O(n+m)
B.O(n∗m)
C.O(mlogn)
D.O(nlogm)

ans = O(mlogn)

def f():
	ans = 0
	for (i = n; i >= 1; i /= 2):
		for (j = 1; j <= m; j *= 2)
			ans += (i * j)
	print(ans)
Time Complexity of this program:

A.O(n∗m)
B.O(logmlogn)
C.O(mlogn)
D.O(nlogm)

ans = O(logmlogn)

// Finding gcd of two numbers a, b.
def gcd(a, b):
	if (a < b) swap(a, b)
	if (b == 0) return a;
	else return gcd(b, a % b)
Time Complexity of this program:

Let n = \max\{a, b\}n=max{a,b}

A.O(1)
B.O(logn)
C.O(n)
D.O(n^2)

ans = O(logn)

def exists(a, x):
	// Check whether the number x exists in the array a.
	lo = 0, hi = len(a) - 1
	while (lo <= hi):
		mid = (lo + hi) / 2
		if (a[mid] == x): return x;
		else if (a[mid] > x): hi = mid - 1;
		else lo = mid + 1;
	return -1; // Not found.
Time Complexity of this program:

Let n = len(a)n=len(a)

A.O(1)
B.O(logn)
C.O(n)
D.O(n^2)

ans = O(nlogn)

def count_occurrences(a, x, lo, hi):
	if lo > hi: return 0
	mid = (lo + hi) / 2;
	if a[mid] < x: return count_occurrences(a, x, mid + 1, hi)
	if a[mid] > x: return count_occurrences(a, x, lo, mid - 1)
	return 1 + count_occurrences(a, x, lo, mid - 1) + count_occurrences(a, x, mid + 1, hi)

// in the main function, we call it as
count_occurrences(a, x, 0, len(a) - 1)
Time Complexity of this program:

Let n = len(a)n=len(a)


A.O(1)
B.O(logn)
C.O(n)
D.O(n^2)

ans = O(nlogn)

def f(n):
	if n == 0 or n == 1: return 1
	return f(n - 1) + f(n - 2)
Time Complexity of this program:

A.O(logn)
B.O(n)
C.O(n^2)
D.O(2^n)

ans = O(2^n)

reate array memo[n + 1]

// Finding fibonacci numbers with memoization.
def f(n):
	if memo[n] != -1: return memo[n]
	if n == 0 or n == 1: ans = 1
	else: ans = f(n - 1) + f(n - 2)
	memo[n] = ans
	return ans

// In the main function.
Fill the memo array with all values equal to -1.
ans = f(n)
Time Complexity of this program:

A.O(logn)
B.O(n)
C.(n^2)
D.O(2^n)

ans = O(n)


def f(a):
	n = len(a)
	j = 0
	for i = 0 to n - 1:
		while (j < n and a[i] < a[j]):
			j += 1
Time Complexity of this program:

A.O(logn)
B.O(n)
C.O(nlogn)
D.O(n^2)

ans = O(n)

/* j is not intialized at every step */

def f():
	ans = 0
	for i = 1 to n:
		for j = i; j <= n; j += i:
			ans += 1
	print(ans)
Time Complexity of this program:

A.O(logn)
B.O(n)
C.O(nlogn)
D.O(n^2)

ans = O(nlogn)


LEETCODE - 136

Single Number

Given a non-empty array of integers nums, every element appears twice except for one. Find that single one.
You must implement a solution with a linear runtime complexity and use only constant extra space.
 

Example 1:

Input: nums = [2,2,1]
Output: 1

Solution
class Solution {
    public int singleNumber(int[] nums) {
     int result = 0;
        for(int i =0;i<nums.length;i++){
            result = result ^ nums[i];
        }
        return result;
    }
}
Time Complexity : O(n)
Space Complexity : O(1)


